diff --git a/node_modules/ansicolor/ansicolor.js b/node_modules/ansicolor/ansicolor.js
index c0cb4f5..3cb1e81 100644
--- a/node_modules/ansicolor/ansicolor.js
+++ b/node_modules/ansicolor/ansicolor.js
@@ -251,9 +251,10 @@ class Colors {
     /**
      * @param {string} s a string containing ANSI escape codes.
      */
-    constructor (s) {
+    constructor (s, previousSpan) {
 
         this.spans = s ? rawParse (s) : []
+        this.previousSpan = previousSpan
     }
 
     get str () {
@@ -272,7 +273,32 @@ class Colors {
             styles     = new Set ()
         }
 
-        reset ()
+        if(this.previousSpan && !this.previousSpan.reset) {
+
+            if(this.previousSpan.color) {
+                let brightness = undefined;
+                if(this.previousSpan.color.bright) brightness = Code.bright;
+                else if(this.previousSpan.color.dim) brightness = Code.dim;
+                color = new Color(false, this.previousSpan.color.name, brightness);
+            }
+            else color = new Color();
+
+            if(this.previousSpan.bgColor) {
+                let brightness = undefined;
+                if(this.previousSpan.bgColor.bright) brightness = Code.bright;
+                else if(this.previousSpan.bgColor.dim) brightness = Code.dim;
+                bgColor = new Color(true, this.previousSpan.bgColor.name, brightness);
+            }
+            else bgColor = new Color(true);
+
+            if(this.previousSpan.bold) brightness = Code.bright;
+
+            styles = new Set();
+            if(this.previousSpan.italic) styles.add('italic');
+            if(this.previousSpan.underline) styles.add('underline');
+            if(this.previousSpan.inverted) styles.add('inverse');
+        }
+        else reset();
 
         return O.assign (new Colors (), {
 
@@ -289,7 +315,7 @@ class Colors {
 
                 const styledSpan = O.assign (
                                         { css: bold + italic + underline + foreColor.css (inverted) + bgColor.css (inverted) },
-                                        clean ({ bold: !!bold, color: foreColor.clean, bgColor: bgColor.clean }),
+                                        clean ({ bold: !!bold, color: foreColor.clean, bgColor: bgColor.clean, inverted }),
                                         span)
 
                 for (const k of styles) { styledSpan[k] = true }
@@ -302,6 +328,7 @@ class Colors {
 
                     if (span.code.value === Code.reset) {
                         reset ()
+                        styledSpan.reset = true;
 
                     } else {
 
@@ -321,7 +348,7 @@ class Colors {
 
                 return styledSpan
 
-            }).filter (s => s.text.length > 0)
+            }).filter (s => s.text.length > 0 || s.reset)
         })
     }
 
@@ -358,8 +385,8 @@ class Colors {
      * @desc parses a string containing ANSI escape codes
      * @return {Colors} parsed representation.
      */
-    static parse (s) {
-        return new Colors (s).parsed
+    static parse (s, previousSpan) {
+        return new Colors (s, previousSpan).parsed
     }
 
     /**
diff --git a/node_modules/ansicolor/build/ansicolor.js b/node_modules/ansicolor/build/ansicolor.js
index a64b5c8..f309bd7 100644
--- a/node_modules/ansicolor/build/ansicolor.js
+++ b/node_modules/ansicolor/build/ansicolor.js
@@ -326,10 +326,11 @@ var Colors = function () {
     /**
      * @param {string} s a string containing ANSI escape codes.
      */
-    function Colors(s) {
+    function Colors(s, previousSpan) {
         _classCallCheck(this, Colors);
 
         this.spans = s ? rawParse(s) : [];
+        this.previousSpan = previousSpan;
     }
 
     _createClass(Colors, [{
@@ -371,7 +372,27 @@ var Colors = function () {
                 color = new Color(), bgColor = new Color(true /* background */), brightness = undefined, styles = new Set();
             }
 
-            reset();
+            if (this.previousSpan && !this.previousSpan.reset) {
+
+                if (this.previousSpan.color) {
+                    var _brightness = undefined;
+                    if (this.previousSpan.color.bright) _brightness = Code.bright;else if (this.previousSpan.color.dim) _brightness = Code.dim;
+                    color = new Color(false, this.previousSpan.color.name, _brightness);
+                } else color = new Color();
+
+                if (this.previousSpan.bgColor) {
+                    var _brightness2 = undefined;
+                    if (this.previousSpan.bgColor.bright) _brightness2 = Code.bright;else if (this.previousSpan.bgColor.dim) _brightness2 = Code.dim;
+                    bgColor = new Color(true, this.previousSpan.bgColor.name, _brightness2);
+                } else bgColor = new Color(true);
+
+                if (this.previousSpan.bold) brightness = Code.bright;
+
+                styles = new Set();
+                if (this.previousSpan.italic) styles.add('italic');
+                if (this.previousSpan.underline) styles.add('underline');
+                if (this.previousSpan.inverted) styles.add('inverse');
+            } else reset();
 
             return O.assign(new Colors(), {
 
@@ -386,7 +407,7 @@ var Colors = function () {
 
                     var foreColor = color.defaultBrightness(brightness);
 
-                    var styledSpan = O.assign({ css: bold + italic + underline + foreColor.css(inverted) + bgColor.css(inverted) }, clean({ bold: !!bold, color: foreColor.clean, bgColor: bgColor.clean }), span);
+                    var styledSpan = O.assign({ css: bold + italic + underline + foreColor.css(inverted) + bgColor.css(inverted) }, clean({ bold: !!bold, color: foreColor.clean, bgColor: bgColor.clean, inverted: inverted }), span);
 
                     var _iteratorNormalCompletion2 = true;
                     var _didIteratorError2 = false;
@@ -419,6 +440,7 @@ var Colors = function () {
 
                         if (span.code.value === Code.reset) {
                             reset();
+                            styledSpan.reset = true;
                         } else {
 
                             switch (span.code.type) {
@@ -441,7 +463,7 @@ var Colors = function () {
 
                     return styledSpan;
                 }).filter(function (s) {
-                    return s.text.length > 0;
+                    return s.text.length > 0 || s.reset;
                 })
             });
         }
@@ -481,8 +503,8 @@ var Colors = function () {
          * @desc parses a string containing ANSI escape codes
          * @return {Colors} parsed representation.
          */
-        value: function parse(s) {
-            return new Colors(s).parsed;
+        value: function parse(s, previousSpan) {
+            return new Colors(s, previousSpan).parsed;
         }
 
         /**
@@ -581,4 +603,4 @@ Colors.rgb = {
 
 /*  ------------------------------------------------------------------------ */
 
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
